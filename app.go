package main

import (
	"context"
	"fmt"
	"log"

	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
)

// Task –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞–¥–∞—á—É
type Task struct {
	ID   int    `json:"id" gorm:"primaryKey"`
	Text string `json:"text"`
	Done bool   `json:"done"`
}

// App —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
type App struct {
	db  *gorm.DB
	ctx context.Context
}

// NewApp —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
func NewApp() *App {
	db, err := gorm.Open(sqlite.Open("tasks.db"), &gorm.Config{})
	if err != nil {
		log.Println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:", err)
		return nil
	}

	// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–∏–≥—Ä–∞—Ü–∏—è —Å—Ö–µ–º—ã
	if err := db.AutoMigrate(&Task{}); err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:", err)
		return nil
	}

	log.Println("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")
	return &App{db: db}
}

func (a *App) startup(ctx context.Context) {
	a.ctx = ctx
	log.Println("üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!")
}

// AddTask –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
func (a *App) AddTask(text string) (*Task, error) {
	if a.db == nil {
		return nil, fmt.Errorf("‚ùå database is not initialized")
	}

	task := Task{Text: text, Done: false}
	if err := a.db.Create(&task).Error; err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:", err)
		return nil, err
	}

	log.Println("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞:", task)
	return &task, nil
}

// GetTasks –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏
func (a *App) GetTasks() ([]Task, error) {
	if a.db == nil {
		return nil, fmt.Errorf("‚ùå database is not initialized")
	}

	var tasks []Task
	if err := a.db.Find(&tasks).Error; err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á:", err)
		return nil, err
	}

	log.Println("üìã –ó–∞–¥–∞—á–∏ –ø–æ–ª—É—á–µ–Ω—ã:", tasks)
	return tasks, nil
}

// ToggleTaskStatus –º–µ–Ω—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
func (a *App) ToggleTaskStatus(id int) error {
	if a.db == nil {
		return fmt.Errorf("‚ùå database is not initialized")
	}

	var task Task
	if err := a.db.First(&task, id).Error; err != nil {
		log.Println("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:", err)
		return err
	}

	task.Done = !task.Done
	if err := a.db.Save(&task).Error; err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:", err)
		return err
	}

	log.Println("‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –∏–∑–º–µ–Ω–µ–Ω:", task)
	return nil
}

// DeleteTask —É–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á—É –ø–æ ID
func (a *App) DeleteTask(id int) error {
	if a.db == nil {
		return fmt.Errorf("‚ùå database is not initialized")
	}

	var task Task
	if err := a.db.First(&task, id).Error; err != nil {
		log.Println("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:", err)
		return err
	}

	if err := a.db.Delete(&task).Error; err != nil {
		log.Println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏:", err)
		return err
	}

	log.Println("üóëÔ∏è –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞:", task)
	return nil
}
